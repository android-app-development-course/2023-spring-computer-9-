// Generated by view binder compiler. Do not edit!
package com.example.cashbook.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cashbook.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SettingsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout cancelUser;

  @NonNull
  public final RelativeLayout clearAll;

  @NonNull
  public final CardView logOut;

  @NonNull
  public final RelativeLayout logoutButton;

  @NonNull
  public final CardView select;

  @NonNull
  public final RelativeLayout switchButton;

  @NonNull
  public final CardView switchUser;

  private SettingsBinding(@NonNull RelativeLayout rootView, @NonNull RelativeLayout cancelUser,
      @NonNull RelativeLayout clearAll, @NonNull CardView logOut,
      @NonNull RelativeLayout logoutButton, @NonNull CardView select,
      @NonNull RelativeLayout switchButton, @NonNull CardView switchUser) {
    this.rootView = rootView;
    this.cancelUser = cancelUser;
    this.clearAll = clearAll;
    this.logOut = logOut;
    this.logoutButton = logoutButton;
    this.select = select;
    this.switchButton = switchButton;
    this.switchUser = switchUser;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel_user;
      RelativeLayout cancelUser = ViewBindings.findChildViewById(rootView, id);
      if (cancelUser == null) {
        break missingId;
      }

      id = R.id.clear_all;
      RelativeLayout clearAll = ViewBindings.findChildViewById(rootView, id);
      if (clearAll == null) {
        break missingId;
      }

      id = R.id.log_out;
      CardView logOut = ViewBindings.findChildViewById(rootView, id);
      if (logOut == null) {
        break missingId;
      }

      id = R.id.logout_button;
      RelativeLayout logoutButton = ViewBindings.findChildViewById(rootView, id);
      if (logoutButton == null) {
        break missingId;
      }

      id = R.id.select;
      CardView select = ViewBindings.findChildViewById(rootView, id);
      if (select == null) {
        break missingId;
      }

      id = R.id.switch_button;
      RelativeLayout switchButton = ViewBindings.findChildViewById(rootView, id);
      if (switchButton == null) {
        break missingId;
      }

      id = R.id.switch_user;
      CardView switchUser = ViewBindings.findChildViewById(rootView, id);
      if (switchUser == null) {
        break missingId;
      }

      return new SettingsBinding((RelativeLayout) rootView, cancelUser, clearAll, logOut,
          logoutButton, select, switchButton, switchUser);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
